source lib/common.vars

function f_checkAndSetBuildTimestamp {
	typeset extra_info=$1
    
	if [[ -z $BUILD_TIMESTAMP ]]; then
		f_setBuildTimestamp $(f_getBuildTime) "$extra_info"
	fi
}

function f_setBuildTimestamp {
	typeset time=$1
	typeset extra_info=$2
    
	typeset timestamp=$time
	if [[ -n $extra_info ]]; then
		timestamp="${time}${FILENAME_SEGMENT_SEPARATOR}${extra_info}"
	fi
   
	export BUILD_TIMESTAMP=$timestamp
}

function f_getBuildTime {
	typeset delim=$FILENAME_WORD_DELIMETER
	echo `date +"%Y${delim}%m${delim}%d${delim}${delim}%H${delim}%M${delim}%S"`
}

# creates folder structure if it doesn't exist
function f_getRunOutputFilename_Helper {
	typeset filename=$1
    
	typeset sep=$FILENAME_SEGMENT_SEPARATOR
	typeset filename="${LEM_TMP_AREA}${USER}${sep}${BUILD_TIMESTAMP}${sep}${filename}.out"
	
	typeset parents=`dirname $filename`
	mkdir -p $parents
	
	echo "$filename"
}

function f_printDate {
	echo -n "[`date "+%m/%d %T"`] "
}

function f_compute {
	typeset value=$1
	
	echo `echo "$value" | bc -l`
}

function f_round {
	typeset value=$1
	typeset decimal_places=$2
	
	# set default 2
	if [[ -z $decimal_places ]]; then
		decimal_places=2
	fi
	
	printf %.${decimal_places}f $value
}

function f_opera_getRewards {
	typeset address=$1
	typeset validator_id=$2

	f_runOpera "sfcc.pendingRewards('$address', $validator_id);"
}

function f_getRewardsPrintoutFormat {
	echo "%-6s %-7s %9s %23s +( %8s %21s ) [ %15s, %12s, %15s, %15s, %15s ]\n"
}

function f_printRewards {
	typeset id=$1
	typeset pending_rewards=$2
	typeset previous_rewards=$3
	typeset epoch=$4
	typeset total_stake=$5
	typeset unlocked_stake=$6
	typeset locked_stake=$7
	typeset total_delegated=$8
	typeset decimal_places=$9
	typeset diffs_only=${10}
	
	#typeset tmp_out="/tmp/printRewards.out"
	#echo "|$epoch| id=$id $pending_rewards $previous_rewards $total_stake $unlocked_stake $locked_stake $total_delegated $decimal_places $diffs_only" >> $tmp_out
	
	typeset rewards_rounded=$(f_convertLemNumber "$pending_rewards" $decimal_places)
	pending_rewards=$(f_round $(f_compute $(f_substituteLemNumber "$pending_rewards")) 0)	# important! sub out e+21's, then convert to actual BIG lemon number, then round
	typeset diff=$(f_compute "$pending_rewards - $previous_rewards")
	typeset diff_rounded=$(f_convertLemNumber "$diff" $decimal_places)
	#echo -e "\t$rewards_rounded $diff $diff_rounded" >> $tmp_out
	
	typeset    total_per_staked=$(f_divideAndRound "$diff" "$total_stake" 6)
	typeset  total_per_unlocked=$(f_divideAndRound "$diff" "$unlocked_stake" 6)
	typeset    total_per_locked=$(f_divideAndRound "$diff" "$locked_stake" 6)
	typeset total_per_delegated=$(f_divideAndRound "$diff" "$total_delegated" 6)
	
	typeset     total_stake_converted=$(f_convertLemNumber "$total_stake")
	typeset total_delegated_converted=$(f_convertLemNumber "$total_delegated")
	typeset         total_share=$(f_compute "$total_stake_converted+(($total_delegated_converted-$total_stake_converted)*.35)")
	typeset     total_share_lem=$(f_convertToLemNumber "$total_share")
	typeset     total_per_share=$(f_divideAndRound "$diff" "$total_share_lem" 6)
	#echo -e "\t$total_per_staked $total_per_unlocked $total_per_locked $total_per_delegated $total_share $total_share_lem $total_per_share" >> $tmp_out
	
	typeset     total_rounded=$(f_convertLemNumber "$total_stake" 0)
	typeset  unlocked_rounded=$(f_convertLemNumber "$unlocked_stake" 0)
	typeset    locked_rounded=$(f_convertLemNumber "$locked_stake" 0)
	typeset delegated_rounded=$(f_convertLemNumber "$total_delegated" 0)
	typeset     share_rounded=$(f_convertLemNumber "$total_share_lem" 0)
	#echo -e "\t$total_rounded $unlocked_rounded $locked_rounded $delegated_rounded $share_rounded" >> $tmp_out
	
	if [[ $diffs_only == false || ($diffs_only == true && $diff -ne 0) ]]; then
		f_printDate
		typeset rewardsPrintoutFormat=`f_getRewardsPrintoutFormat`
		printf "$rewardsPrintoutFormat" "|$epoch|" "id=$id" "$rewards_rounded" "$pending_rewards" "$diff_rounded" "$diff" "$total_rounded=$total_per_staked" "$unlocked_rounded=$total_per_unlocked" "$locked_rounded=$total_per_locked" "$delegated_rounded=$total_per_delegated" "$share_rounded=$total_per_share"
		#echo "|$epoch| id=$id $rewards_rounded $pending_rewards (+$diff $diff_rounded) [$total_rounded=$total_per_staked, $unlocked_rounded=$total_per_unlocked, $locked_rounded=$total_per_locked]"
	fi
}

function f_divideAndRound {
	typeset numerator=$1
	typeset denominator=$2
	typeset decimal_places=$3
	
	numerator=`f_convertLemNumber $numerator`
	denominator=`f_convertLemNumber $denominator`
	typeset denominator_rounded=`f_round $denominator 0`
	if [[ $denominator_rounded -eq 0 ]]; then	# have to use denominator_rounded or else you'll get 'syntax error: invalid arithmetic operator (error token is ".00000000000000000000")'
		echo "na"
	else
		f_round $(f_compute "$numerator / $denominator") $decimal_places
	fi
}

# f_writeActiveValsList | wc -l
function f_getTotalActiveVals {
	typeset last_id=$(f_opera_getLastValidatorId)

	typeset val_total=0
	for val_id in $(seq 1 $last_id); do 
		typeset validator=$(f_runOpera "sfcc.getValidator($val_id);")
		typeset hit=`echo $validator | grep -v -F '[1,' | grep -v -F '[8' | wc -l`
		if [[ $hit -eq 1 ]]; then
			((val_total++))
		fi
	done
	
	echo $val_total
}

function f_writeActiveValsList {
	typeset outfile=$1

	typeset last_id=$(f_opera_getLastValidatorId)

	for val_id in $(seq 1 $last_id); do 
		typeset validator=$(f_runOpera "sfcc.getValidator($val_id);")
		typeset hit=`echo $validator | grep -v -F '[1,' | grep -v -F '[8' | wc -l`
		if [[ $hit -eq 1 ]]; then
			echo "$val_id: $validator" >> $outfile
		fi
	done
}

function f_opera_getTotalStake {
	f_runOpera "sfcc.totalStake();"
}

function f_opera_getStake {
	typeset address=$1
	typeset validator_id=$2

	f_runOpera "sfcc.getStake('$address', $validator_id);"
}

function f_opera_getUnlockedStake {
	typeset address=$1
	typeset validator_id=$2

	f_runOpera "sfcc.getUnlockedStake('$address', $validator_id);"
}

function f_opera_getLockedStake {
	typeset address=$1
	typeset validator_id=$2

	f_runOpera "sfcc.getLockedStake('$address', $validator_id);"
}

function f_opera_getDelegated {
	typeset id=$1

	f_runOpera "sfcc.getValidator($id)[3];"
}

function f_opera_getLastValidatorId {
	f_runOpera "sfcc.lastValidatorID();"
}

function f_opera_getValidator {
	typeset id=$1
	
	f_runOpera "sfcc.getValidator($id);"
}

function f_opera_getEpoch {
	f_runOpera "sfcc.currentEpoch();"
}

function f_opera_getSealedEpoch {
	f_runOpera "sfcc.currentSealedEpoch();"
}

function f_opera_getBlock {
	f_runOpera "ftm.blockNumber"
}

function f_opera_isSlashed {
	typeset id=$1
	
	f_runOpera "sfcc.isSlashed($id);"
}

function f_opera_getPeers {
	f_runOpera "net.peerCount;"
}

function f_opera_getEpochValidatorIds {
	typeset epoch=$1
	
	f_runOpera "sfcc.getEpochValidatorIDs($epoch);"
}

function f_runOpera {
	typeset command=$1
	
	$LEM_OPERA_CMD attach --preload $LEM_PRELOAD_DIR --datadir=$LEM_DATA_DIR --exec "$command"
}

function f_convertLemNumber {
	typeset lem_number=$1
	typeset decimal_places=$2
	
	typeset substituted=`f_substituteLemNumber $lem_number`
	typeset converted=`echo "${substituted}/${LEM_PARTICLE}" | bc -l`
	
	if [[ -z $decimal_places ]]; then
		echo $converted
	else
		f_round "$converted" $decimal_places
	fi
}

function f_substituteLemNumber {
	typeset lem_number=$1
	
	echo $lem_number | sed s#e+#*10^#
}

function f_convertToLemNumber {
	typeset number=$1

	echo "${number}*${LEM_PARTICLE}" | bc -l
}

function f_getRewardsPayoutTotal {
	typeset filename=$1
	typeset epoch_number=$2
	typeset print_data=$3

	if [[ -z $filename || -z $epoch_number ]]; then
		echo "filename AND epoch_number BOTH need to be set!"
		echo "filename=$filename"
		echo "epoch_number=$epoch_number"
		exit
	fi
	
	typeset last_X_data=`grep -F '-' "$filename" | sed -n "/|${epoch_number}|/,\\$p"`
	typeset  summaries_data=`echo "$last_X_data" | grep -v "id="`
	typeset collection_data=`echo "$last_X_data" | grep    "id="`
	typeset   summaries_total=`echo "$summaries_data"  | awk '{sum += $6} END {print sum}'`
	typeset collections_total=`echo "$collection_data" | awk '{sum += $8} END {print sum}'`
	if [[ $print_data == true ]]; then
		echo "========== summary data =========="
		echo "$summaries_data"
		echo "========== collection data =========="
		echo "$collection_data"
		echo "========== totals =========="
		echo "$summaries_total"
		echo "$collections_total"
		echo "========== GRAND =========="
	fi
	f_compute "$summaries_total + $collections_total*-1"
}

function f_resolveFilename {
	typeset filename=$1
	
	if [[ -z $filename ]]; then
		echo "filename needs to be set!"
		echo "filename=$filename"
		exit
	fi

	if [[ `basename $filename` == "$filename" ]]; then
		# there is no directories (i.e. no forward slashes in filename), prepend TMP_AREA
		filename=$LEM_TMP_AREA/$filename
	fi

	echo "$filename"
}
